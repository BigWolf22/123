// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./SafeMath.sol";

contract UCT {
    string public name = "Ukranian Crypto Token";
    string public symbol = "UCT";
    uint256 public totalSupply = 1000000000000000000000000; // 1 million tokens
    uint8 public decimals = 18;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid recipient address"); // Check for invalid address
        require(balanceOf[msg.sender] >= _value, "Not enough tokens in the sender's balance"); // Check if sender has enough balance
        require(balanceOf[_to] + _value >= balanceOf[_to], "Token transfer overflow"); // Check for integer overflow

        uint256 previousBalances = balanceOf[msg.sender] + balanceOf[_to];

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        emit Transfer(msg.sender, _to, _value);

        assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances);

        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        require(_spender != address(0), "Invalid spender address"); // Check for invalid address

        allowance[msg.sender][_spender] = _value;

        emit Approval(msg.sender, _spender, _value);

        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid recipient address"); // Check for invalid address
        require(balanceOf[_from] >= _value, "Not enough tokens in the sender's balance"); // Check if sender has enough balance
        require(allowance[_from][msg.sender] >= _value, "Not enough allowance for transfer"); // Check if sender has enough allowance
        require(balanceOf[_to] + _value >= balanceOf[_to], "Token transfer overflow"); // Check for integer overflow

        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];

        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;

        emit Transfer(_from, _to, _value);

        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);

        return true;
        
    }
    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {
     require(_spender != address(0), "Invalid spender address"); // Check for invalid address

     uint256 oldValue = allowance[msg.sender][_spender];
     if (_subtractedValue >= oldValue) { // Check if allowance is greater than or equal to the value being subtracted
        allowance[msg.sender][_spender] = 0;
     } else { // If allowance is less than the value being subtracted
        allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);
     }

     emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);
     return true;
     }


/**
 * @dev Function to burn a specific amount of tokens from the caller's balance.
 * @param _value The amount of token to be burned.
 * @return A boolean that indicates if the operation was successful.
 */
function burn(uint256 _value) public returns (bool) {
    require(_value <= balanceOf[msg.sender], "Insufficient balance"); // Check if the sender has enough balance
    require(_value > 0, "Invalid value"); // Check if the value to be burned is greater than zero

    address burner = msg.sender;
    balanceOf[burner] = balanceOf[burner].sub(_value);
    totalSupply = totalSupply.sub(_value);
    emit Transfer(burner, address(0), _value);
    return true;
}

/**
 * @dev Function to burn a specific amount of tokens from a specified address.
 * @param _from The address which you want to burn tokens from.
 * @param _value The amount of token to be burned.
 * @return A boolean that indicates if the operation was successful.
 */
function burnFrom(address _from, uint256 _value) public returns (bool) {
    require(_from != address(0), "Invalid address"); // Check for invalid address
    require(_value <= balanceOf[_from], "Insufficient balance"); // Check if the sender has enough balance
    require(_value <= allowance[_from][msg.sender], "Insufficient allowance"); // Check if the sender is allowed to burn this much
    require(_value > 0, "Invalid value"); // Check if the value to be burned is greater than zero

    address burner = _from;
    balanceOf[burner] = balanceOf[burner].sub(_value);
    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    totalSupply = totalSupply.sub(_value);
    emit Transfer(burner, address(0), _value);
    return true;
}


    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool success) {
        require(_spender != address(0), "Invalid spender address");

        allowance[msg.sender][_spender] += _addedValue;

        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);

        return true;
    }
}



